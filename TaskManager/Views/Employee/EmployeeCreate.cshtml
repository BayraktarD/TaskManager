@model TaskManager.Models.EmployeeModel

@{
    ViewData["Title"] = "EmployeeCreate";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<script>
    var pswValid = false;

    function validatePassword() {
        var txbPassword = document.getElementById("txbPassword").value;
        var txbPasswordConfirm = document.getElementById("txbPasswordConfirm").value;
        var message = document.getElementById("message");

        var pswLenghtValidation = document.getElementById("pswLenghtValidation");
        var pswUpperValidation = document.getElementById("pswUpperValidation");
        var pswDigitValidation = document.getElementById("pswDigitValidation");
        var pswNonAlphanumericValidation = document.getElementById("pswNonAlphanumericValidation");


        var nonAlphanumeric = new RegExp("[^A-Za-z0-9]");
        var digit = new RegExp("[0-9]");
        var upperCase = new RegExp("[A-Z]");



        var btnCreate = document.getElementById("btnCreate");
        if (txbPassword.length < 8) {
            pswLenghtValidation.innerHTML = "Password should contain at least 8 charachters!";
            pswLenghtValidation.style.color = "red";
        }
        else{
            pswLenghtValidation.innerHTML = "";

        }
        if (!upperCase.test(txbPassword)) {
            pswUpperValidation.innerHTML = "Passwords must have at least one uppercase ('A'-'Z')";
            pswUpperValidation.style.color = "red";
        }
        else {
            pswUpperValidation.innerHTML = "";

        }

        if (!digit.test(txbPassword)) {
            pswDigitValidation.innerHTML = "Passwords must have at least one digit ('0'-'9')";
            pswDigitValidation.style.color = "red";
        }
        else {
            pswDigitValidation.innerHTML = "";
        }

        if (!nonAlphanumeric.test(txbPassword)) {
            pswNonAlphanumericValidation.innerHTML = "Passwords must have at least one non alphanumeric character.";
            pswNonAlphanumericValidation.style.color = "red";
        }
        else {
            pswNonAlphanumericValidation.innerHTML = "";
        }

        if (txbPassword != txbPasswordConfirm) {
            message.innerHTML = "Passwords do not match";
            message.style.color = "red";
            pswValid = false;
        } else {
            message.innerHTML = "";
            message.style.color = "green";
            pswValid = true;
            enableBtn();

        }
    }

    var jobTitleValid = false;

    function validateJobSelection() {

        var ddlJobsList = document.getElementById("ddlJobsList");

        var ddlJobsListOptions = ddlJobsList.options;

        var ddlSelectedIndex = ddlJobsListOptions.selectedIndex;

        for (var i = 0; i < ddlJobsListOptions.length; i++) {
            if (i == ddlSelectedIndex && i != 0) {
                ddlJobsListOptions[i].selected = true;
                jobTitleValid = true;
                enableBtn();
                break;
            }
        }
    }

    var depValid = false;

    function validateDepartmentSelection() {

        var ddlDepartmentsList = document.getElementById("ddlDepartmentsList");

        var ddlDepartmentsListOptions = ddlDepartmentsList.options;

        var ddlSelectedIndex = ddlDepartmentsListOptions.selectedIndex;

        for (var i = 0; i < ddlDepartmentsListOptions.length; i++) {
            if (i == ddlSelectedIndex && i != 0) {
                ddlDepartmentsListOptions[i].selected = true;
                depValid = true;
                enableBtn();
                break;
            }
        }
    }

    var otherValid = false;

    function validateNameSurname() {
        var txbName = document.getElementById("txbName");
        var txbSurname = document.getElementById("txbSurname");
        var txbEmail = document.getElementById("txbEmail");

        if (txbSurname.value != "" && txbName != "" && txbEmail != "") {
            otherValid = true;
            enableBtn();
        }
        else {
            otherValid = false;
        }

    }

    function enableBtn() {
        var btnCreate = document.getElementById("btnCreate");

        if (pswValid == true && jobTitleValid == true && depValid == true && otherValid == true) {
            btnCreate.disabled = false;

        }
        else {
            btnCreate.disabled = true;
        }
    }

</script>

@if (ViewData.ModelState.Values.Any(x => x.Errors.Count >= 1))
{
    <div class="alert alert-danger">
        @Html.ValidationSummary()
    </div>
}

<h1 style="text-align:center">EmployeeCreate</h1><hr >

<h4>EmployeeModel</h4>
<hr />


<div class="row">
    <div class="col-md-4">
        <form asp-action="Create">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <div class="form-group">
                <label asp-for="Name" class="control-label"></label>
                <input asp-for="Name" id="txbName" class="form-control" onblur="validateNameSurname()" />
                <span asp-validation-for="Name" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Surname" class="control-label"></label>
                <input asp-for="Surname" id="txbSurname" class="form-control" onblur="validateNameSurname()" />
                <span asp-validation-for="Surname" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Password" class="control-label"></label>
                <input type="password" id="txbPassword" asp-for="Password" class="form-control" onblur="validatePassword()" />
                <span asp-validation-for="Password" class="text-danger"></span>
                <p></p><span id="pswLenghtValidation"></span>
                <p></p> <span id="pswUpperValidation"></span>
                <p></p><span id="pswDigitValidation"></span>
                <p></p><span id="pswNonAlphanumericValidation"></span>
            </div>

            <div class="form-group">
                <label class="control-label">Confirm Password</label>
                <input type="password" id="txbPasswordConfirm" class="form-control" onblur="validatePassword()" required />
                <span id="message"></span>
            </div>
            <div class="form-group">
                <label asp-for="Email" class="control-label"></label>
                <input asp-for="Email" id="txbEmail" class="form-control" onblur="validateNameSurname()" />
                <span asp-validation-for="Email" class="text-danger"></span>
            </div>
            <div class="form-group form-check">
                <label class="form-check-label">
                    <input class="form-check-input" asp-for="CanCreateTasks" /> @Html.DisplayNameFor(model => model.CanCreateTasks)
                    <span asp-validation-for="CanCreateTasks" class="text-danger"></span>

                </label>
            </div>
            <div class="form-group form-check">
                <label class="form-check-label">
                    <input class="form-check-input" asp-for="CanAssignTasks" /> @Html.DisplayNameFor(model => model.CanAssignTasks)
                </label>
            </div>
            <div class="form-group form-check">
                <label class="form-check-label">
                    <input class="form-check-input" asp-for="CanModifyTasks" /> @Html.DisplayNameFor(model => model.CanModifyTasks)
                </label>
            </div>
          
            <div class="form-group form-check">
                <label class="form-check-label">
                    <input class="form-check-input" asp-for="CanDeleteTasks" /> @Html.DisplayNameFor(model => model.CanDeleteTasks)
                </label>
            </div>
            <div class="form-group form-check">
                <label class="form-check-label">
                    <input class="form-check-input" asp-for="CanCreateProfiles" /> @Html.DisplayNameFor(model => model.CanCreateProfiles)
                </label>
            </div>
            <div class="form-group form-check">
                <label class="form-check-label">
                    <input class="form-check-input" asp-for="CanDeleteProfiles" /> @Html.DisplayNameFor(model => model.CanDeleteProfiles)
                </label>
            </div>
            <div class="form-group form-check">
                <label class="form-check-label">
                    <input class="form-check-input" asp-for="CanModifyProfiles" /> @Html.DisplayNameFor(model => model.CanModifyProfiles)
                </label>
            </div>
            
            <div class="form-group" hidden>
                <label asp-for="JobTitle" class="control-label"></label>
            </div>
            <div class="form-group">

                <label asp-for="JobTitleString" class="control-label"></label>
                <br />
                <select id="ddlJobsList" name="ddlJobsList" onchange="validateJobSelection()">
                    <option value="" disabled selected>Select an option</option>
                    @foreach (var item in ViewBag.JobTitlesList)
                    {
                        <option value="@item.Value">@item.Text</option>
                    }
                </select>

                <span asp-validation-for="JobTitleString" class="text-danger"></span>
            </div>
            <div class="form-group" hidden>
                <label asp-for="Department" class="control-label"></label>
            </div>
            <div class="form-group">

                <label asp-for="DepartmentString" class="control-label"></label>
                <br />
                <select id="ddlDepartmentsList" name="ddlDepartmentsList" onchange="validateDepartmentSelection()">
                    <option value="" disabled selected>Select an option</option>
                    @foreach (var item in ViewBag.DepartmentsList)
                    {
                        <option value="@item.Value">@item.Text</option>
                    }
                </select>

                <span asp-validation-for="DepartmentString" class="text-danger"></span>
            </div>
            <p>
            </p>
            <div class="form-group">
                <input id="btnCreate" type="submit" value="Create" class="btn btn-primary" disabled />
            </div>
        </form>
    </div>
</div>
<p></p>
<div>
    <a asp-action="Index">Back to List</a>
</div>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
}
